REACH_1 /\ x4 <-> p3 = 0 /\ EDGE_1_6 -> REACH_6 /\ EDGE_1_5 -> REACH_5 /\ EDGE_1_6 -> x4 /\ EDGE_1_5 -> not x4 /\ REACH_1 -> (malloc(H_7,H_0,p2,8) /\ p3 = p2 /\ (EDGE_1_6 \/ EDGE_1_5)) /\ EDGE_1_6 -> eq(H_1,H_7) /\ REACH_6 -> EDGE_1_6 /\ REACH_6 -> (false /\ false) /\ EDGE_1_5 -> eq(H_2,H_7) /\ REACH_5 -> EDGE_1_5 /\ x11 <-> x10 = 0 /\ EDGE_5_13 -> REACH_13 /\ EDGE_5_12 -> REACH_12 /\ EDGE_5_13 -> x11 /\ EDGE_5_12 -> not x11 /\ REACH_5 -> (p7 = p3 + 0 + 0 /\ store(H_8,H_2,0,p7) /\ p8 = p3 + 0 + 1 /\ store(H_9,H_8,1,p8) /\ p9 = p3 + 0 + 0 /\ load(H_9,x10,p9) /\ (EDGE_5_13 \/ EDGE_5_12)) /\ EDGE_5_12 -> eq(H_3,H_9) /\ REACH_12 -> EDGE_5_12 /\ REACH_12 -> true /\ EDGE_5_13 -> eq(H_4,H_9) /\ REACH_13 -> EDGE_5_13 /\ x16 <-> x15 = 0 /\ EDGE_13_18 -> REACH_18 /\ EDGE_13_17 -> REACH_17 /\ EDGE_13_18 -> x16 /\ EDGE_13_17 -> not x16 /\ REACH_13 -> (p14 = p3 + 0 + 1 /\ load(H_4,x15,p14) /\ (EDGE_13_18 \/ EDGE_13_17)) /\ REACH_17 -> EDGE_13_17 /\ REACH_17 -> true /\ REACH_18 -> EDGE_13_18 /\ REACH_18 -> false
/*
struct sss
{
    int x;
    int y;
};
typedef struct sss *sss_t;
void f(void)
{
    sss_t p = (sss_t)malloc(sizeof(struct sss));
    if (p == 0)
        abort();
    p->x = 0;
    p->y = 1;
    assert(p->x == 0);
    assert(p->y == 0);
}
*/
