REACH_1 /\ x7 <-> x6 != 0 /\ EDGE_1_9 -> REACH_9 /\ EDGE_1_8 -> REACH_8 /\ EDGE_1_9 -> x7 /\ EDGE_1_8 -> not x7 /\ REACH_1 -> (x2 = 0 + 1 /\ load(H_0,p3,b) /\ p5 = p3 + x4 /\ load(H_0,x6,p5) /\ (EDGE_1_9 \/ EDGE_1_8)) /\ REACH_9 -> EDGE_1_9 /\ EDGE_9_11 -> REACH_11 /\ REACH_9 -> (x10 = 0 + 1 /\ EDGE_9_11) /\ REACH_8 -> EDGE_1_8 /\ EDGE_8_11 -> REACH_11 /\ REACH_8 -> (x12 = 0 + 1 /\ EDGE_8_11) /\ REACH_11 -> (EDGE_8_11 \/ EDGE_9_11) /\ EDGE_9_11 -> 'y.0' = 0 /\ EDGE_8_11 -> 'y.0' = x12 /\ EDGE_9_11 -> 'x.0' = x10 /\ EDGE_8_11 -> 'x.0' = 0 /\ x18 <-> x17 != 0 /\ EDGE_11_20 -> REACH_20 /\ EDGE_11_19 -> REACH_19 /\ EDGE_11_20 -> x18 /\ EDGE_11_19 -> not x18 /\ REACH_11 -> (x13 = x2 + 1 /\ load(H_0,p14,b) /\ p16 = p14 + x15 /\ load(H_0,x17,p16) /\ (EDGE_11_20 \/ EDGE_11_19)) /\ REACH_20 -> EDGE_11_20 /\ EDGE_20_22 -> REACH_22 /\ REACH_20 -> (x21 = 'x.0' + 1 /\ EDGE_20_22) /\ REACH_19 -> EDGE_11_19 /\ EDGE_19_22 -> REACH_22 /\ REACH_19 -> (x23 = 'y.0' + 1 /\ EDGE_19_22) /\ REACH_22 -> (EDGE_19_22 \/ EDGE_20_22) /\ EDGE_20_22 -> 'y.1' = 'y.0' /\ EDGE_19_22 -> 'y.1' = x23 /\ EDGE_20_22 -> 'x.1' = x21 /\ EDGE_19_22 -> 'x.1' = 'x.0' /\ x29 <-> x28 != 0 /\ EDGE_22_31 -> REACH_31 /\ EDGE_22_30 -> REACH_30 /\ EDGE_22_31 -> x29 /\ EDGE_22_30 -> not x29 /\ REACH_22 -> (x24 = x13 + 1 /\ load(H_0,p25,b) /\ p27 = p25 + x26 /\ load(H_0,x28,p27) /\ (EDGE_22_31 \/ EDGE_22_30)) /\ REACH_31 -> EDGE_22_31 /\ EDGE_31_33 -> REACH_33 /\ REACH_31 -> (x32 = 'x.1' + 1 /\ EDGE_31_33) /\ REACH_30 -> EDGE_22_30 /\ EDGE_30_33 -> REACH_33 /\ REACH_30 -> (x34 = 'y.1' + 1 /\ EDGE_30_33) /\ REACH_33 -> (EDGE_30_33 \/ EDGE_31_33) /\ EDGE_31_33 -> 'y.2' = 'y.1' /\ EDGE_30_33 -> 'y.2' = x34 /\ EDGE_31_33 -> 'x.2' = x32 /\ EDGE_30_33 -> 'x.2' = 'x.1' /\ x40 <-> x39 != 0 /\ EDGE_33_42 -> REACH_42 /\ EDGE_33_41 -> REACH_41 /\ EDGE_33_42 -> x40 /\ EDGE_33_41 -> not x40 /\ REACH_33 -> (x35 = x24 + 1 /\ load(H_0,p36,b) /\ p38 = p36 + x37 /\ load(H_0,x39,p38) /\ (EDGE_33_42 \/ EDGE_33_41)) /\ REACH_42 -> EDGE_33_42 /\ EDGE_42_44 -> REACH_44 /\ REACH_42 -> (x43 = 'x.2' + 1 /\ EDGE_42_44) /\ REACH_41 -> EDGE_33_41 /\ EDGE_41_44 -> REACH_44 /\ REACH_41 -> (x45 = 'y.2' + 1 /\ EDGE_41_44) /\ REACH_44 -> (EDGE_41_44 \/ EDGE_42_44) /\ EDGE_42_44 -> 'y.3' = 'y.2' /\ EDGE_41_44 -> 'y.3' = x45 /\ EDGE_42_44 -> 'x.3' = x43 /\ EDGE_41_44 -> 'x.3' = 'x.2' /\ x47 <-> x46 = 5 /\ EDGE_44_49 -> REACH_49 /\ EDGE_44_48 -> REACH_48 /\ EDGE_44_49 -> x47 /\ EDGE_44_48 -> not x47 /\ REACH_44 -> (x46 = 'x.3' + 'y.3' /\ (EDGE_44_49 \/ EDGE_44_48)) /\ REACH_48 -> EDGE_44_48 /\ REACH_48 -> true /\ REACH_49 -> EDGE_44_49 /\ REACH_49 -> false
/*
extern int *b;
void f(void)
{
    int x = 0, y = 0, i = 0;
    if (b[i++])
        x++;
    else
        y++;
    if (b[i++])
        x++;
    else
        y++;
    if (b[i++])
        x++;
    else
        y++;
    if (b[i++])
        x++;
    else
        y++;
    assert(x+y == 5);
}
*/
